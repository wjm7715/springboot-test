<configuration>
    <property name = "LOG_PATH" value="${LOG_PATH:-.}" />
    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度,%line:行号,%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} Line:%line ----------------> %msg%n</pattern>
        </encoder>
    </appender>

<!--    &lt;!&ndash;  控制台不打印，直接输出到日志文件  &ndash;&gt;-->
<!--    &lt;!&ndash;  appender 有两个属性 name和class;name指定appender名称，class指定appender的全限定名  &ndash;&gt;-->
<!--    &lt;!&ndash;-->
<!--     appender 的种类-->
<!--        ①ConsoleAppender：把日志添加到控制台-->
<!--        ②FileAppender：把日志添加到文件-->
<!--        ③RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。它是FileAppender的子类-->
<!--     &ndash;&gt;-->
<!--    <appender name="GLMAPPER-LOGGERONE"-->
<!--              class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash;  如果是 true，日志被追加到文件结尾，如果是false，清空现存文件，默认是true。  &ndash;&gt;-->
<!--        <append>true</append>-->
<!--        &lt;!&ndash;  filter可以为appender 添加一个或多个过滤器，可以用任意条件对日志进行过滤。appender 有多个过滤器时，按照配置顺序执行。  &ndash;&gt;-->
<!--        &lt;!&ndash;-->
<!--          ①ThresholdFilter: 临界值过滤器，过滤掉低于指定临界值的日志。当日志级别等于或高于临界值时，-->
<!--          过滤器返回NEUTRAL；当日志级别低于临界值时，日志会被拒绝。-->
<!--          ②LevelFilter: 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据-->
<!--          onMath(用于配置符合过滤条件的操作) 和 onMismatch(用于配置不符合过滤条件的操作)接收或拒绝日志。-->
<!--        &ndash;&gt;-->
<!--        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
<!--            <level>${logging.level}</level>-->
<!--        </filter>-->

<!--        &lt;!&ndash;  file 标签用于指定被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。  &ndash;&gt;-->
<!--        <file>-->
<!--            ${logging.path}/glmapper-spring-boot/glmapper-loggerone.log-->
<!--        </file>-->
<!--        &lt;!&ndash;-->
<!--        rollingPolicy 子标签: 这个子标签用来描述滚动策略的。这个只有appender的class是RollingFileAppender时才需要配置。-->
<!--        这个也会涉及文件的移动和重命名（a.log->a.log.2018.07.22）。-->
<!--        TimeBasedRollingPolicy: 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。这个下面又包括了两个属性：-->
<!--            ①FileNamePattern: 日志文件输出的文件名:按天回滚 daily-->
<!--            ②maxHistory: 日志文件保留天数-->
<!--        这段配置表明每天生成一个日志文件，保存30天的日志文件-->
<!--        &ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            <FileNamePattern>${logging.path}/glmapper-spring-boot/glmapper-loggerone.log.%d{yyyy-MM-dd}</FileNamePattern>-->
<!--            <MaxHistory>30</MaxHistory>-->
<!--        </rollingPolicy>-->
<!--        &lt;!&ndash;-->
<!--        encoder 子标签: 对记录事件进行格式化。它干了两件事：-->
<!--            ①把日志信息转换成字节数组-->
<!--            ②把字节数组写入到输出流-->
<!--        目前encoder只有PatternLayoutEncoder一种类型。-->
<!--        &ndash;&gt;-->
<!--        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
<!--            <charset>UTF-8</charset>-->
<!--        </encoder>-->
<!--    </appender>-->

    <!-- 按照每天生成日志文件 -->
    <appender name="INFO"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
<!--            <FileNamePattern>../webapps/yjdd/logs/%d{yyyy-MM-dd}/info-log.log</FileNamePattern>-->
            <FileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/info-log.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>90</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} Line:%line ----------------> %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--<MaxFileSize>50MB</MaxFileSize>-->
        <!--</triggeringPolicy>-->
    </appender>

    <!-- ERROR级别日志 -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender-->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录ERROR级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志输出位置  可相对、和绝对路径 -->
            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/error-log.log</fileNamePattern>
            <maxHistory>90</maxHistory>
        </rollingPolicy>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} Line:%line ----------------> %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--<MaxFileSize>50MB</MaxFileSize>-->
        <!--</triggeringPolicy>-->
    </appender>

    <!-- WARN级别日志 appender -->
    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录WARN级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/warn-log.log</fileNamePattern>
            <!-- 日志最大的历史 30天 -->
            <maxHistory>90</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} Line:%line ----------------> %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--<MaxFileSize>50MB</MaxFileSize>-->
        <!--</triggeringPolicy>-->
    </appender>


<!--    &lt;!&ndash;  上面的这个配置文件描述的是：com.glmapper.spring.boot.controller这个包下的${logging.level}级别的日志将会使用GLMAPPER-LOGGERONE来打印。-->
<!--          logger有三个属性和一个子标签：-->
<!--          name:用来指定受此logger约束的某一个包或者具体的某一个类。-->
<!--          level:用来设置打印级别（TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF），还有一个值INHERITED或者同义词NULL，-->
<!--          代表强制执行上级的级别。如果没有设置此属性，那么当前logger将会继承上级的级别。-->
<!--          addtivity:用来描述是否向上级logger传递打印信息。默认是true。-->
<!--          appender-ref则是用来指定具体appender的。-->
<!--    &ndash;&gt;-->
<!--    <logger name="com.wjm.springbootmybatis.controller" level="${logging.level}"-->
<!--            additivity="false">-->
<!--        <appender-ref ref="GLMAPPER-LOGGERONE" />-->
<!--    </logger>-->

    <!-- 日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="INFO" />
        <appender-ref ref="ERROR" />
        <appender-ref ref="WARN" />
    </root>

    <!-- 打印执行的sql name指定mapper所在的包，additivity设定为true时，父级也会打印相应的信息，相当于打印多次 -->
    <logger name="com.wjm.springbootmybatis.dao" level="DEBUG" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="INFO" />
        <appender-ref ref="ERROR" />
        <appender-ref ref="WARN" />
    </logger>
</configuration>